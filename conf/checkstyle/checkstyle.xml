<?xml version="1.0" encoding="UTF-8"?>
<!--    This configuration file was written by the eclipse-cs plugin configuration editor-->
<!--    Checkstyle-Configuration: toolarium-jwebserver checkstyle    Description: none-->
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
     <!-- property name="localeLanguage" value="en"/> -->
    <property name="charset" value="UTF-8"/>
     <property name="severity" value="warning"/>
     <property name="fileExtensions" value="java, properties, xml"/>

     <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/config_filefilters.html -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

     <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

     <!-- toolarium-jwebserver allows 250 line length -->
     <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="250"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

     <!-- suppressions -->
     <module name="SuppressionFilter">
          <property name="file" value="${samedir}/checkstyle-suppressions.xml"/>
     </module>

     <module name="TreeWalker">
          <!-- suppress by comment -->
          <module name="SuppressWithNearbyCommentFilter">
               <property name="commentFormat" value="CHECKSTYLE IGNORE THIS LINE"/>
               <property name="checkFormat" value=".*"/>
               <property name="influenceFormat" value="0"/>
          </module>
          <module name="SuppressionCommentFilter">
               <property name="offCommentFormat" value="CHECKSTYLE OFF\: ([\w\|]+)"/>
               <property name="onCommentFormat" value="CHECKSTYLE ON\: ([\w\|]+)"/>
               <property name="checkFormat" value="$1"/>
          </module>
          <!--<module name="FileContentsHolder"/>-->
          <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|29|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="OneTopLevelClass"/>
             <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
             value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly"/>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
             value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <!--<message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>-->
            <!--<message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>-->
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="tokens" value="IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z0-9]+(\.[a-z0-9]+)*$"/>
            <!--<message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>-->
        </module>
        <module name="TypeName">
            <!-- <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <!-- <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <!-- <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
          <!--
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
          -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <!-- <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <!-- <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <!-- <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <!-- <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <!-- <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/> -->
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
              <!--
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
               -->
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="6"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="ParenPad"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens"
             value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
          <!-- TODO
          <module name="MissingJavadocType">
               <property name="scope" value="private"/>
          </module>
          <module name="RequireEmptyLineBeforeBlockTagGroup"/>
          <module name="InvalidJavadocPosition"/>
          <module name="JavadocBlockTagLocation"/>
          <module name="JavadocMissingWhitespaceAfterAsterisk"/>
          -->
        <module name="JavadocTagContinuationIndentation"/>
          <!-- TODO
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
          -->
        <module name="JavadocParagraph"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="validateThrows" value="true"/>
            <property name="allowMissingParamTags" value="false"/>
            <!--<property name="allowMissingThrowsTags" value="true"/>-->
            <property name="allowMissingReturnTag" value="false"/>
            <!--<property name="allowedAnnotations" value="Override, Test"/>-->
            <!--<property name="allowThrowsTagsForSubclasses" value="true"/>-->
          </module>
          <module name="MissingJavadocMethod">
               <property name="scope" value="private"/>
               <property name="minLineCount" value="-1"/>
               <!--<property name="allowedAnnotations" value="Override, Test"/>-->
          </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <!--<message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>-->
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="CommentsIndentation"/>

          <!-- toolarium-jwebserver add on -->
          <module name="RegexpSinglelineJava">
               <property name="format" value="System\.(out|err)\."/>
               <property name="message" value="toolarium-jwebserver: Please use the logger instead of writing data to standard out or error."/>
          </module>
          <module name="RegexpSinglelineJava">
               <property name="format" value="System\.(exit|gc)"/>
               <property name="message" value="toolarium-jwebserver: This operation is not allowed."/>
          </module>
          <module name="RegexpSinglelineJava">
               <property name="format" value="\.(printStackTrace)"/>
               <property name="message" value="toolarium-jwebserver: This operation is not allowed."/>
          </module>
          <module name="JavadocType">
               <property name="severity" value="ignore"/>
          </module>
          <module name="JavadocVariable">
               <property name="severity" value="ignore"/>
          </module>
          <module name="JavadocStyle">
               <property name="severity" value="ignore"/>
               <property name="checkFirstSentence" value="false"/>
          </module>
          <module name="ConstantName">
               <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+))|(log)*$"/>
          </module>
          <module name="LocalFinalVariableName"/>
          <module name="StaticVariableName"/>
          <module name="IllegalImport">
               <property name="illegalPkgs" value="sun"/>
          </module>
          <module name="IllegalThrows">
               <property name="illegalClassNames" value="java.lang.Throwable, java.lang.RuntimeException"/>
          </module>
          <module name="RedundantImport"/>
          <module name="UnusedImports"/>
          <module name="MethodLength">
               <property name="max" value="150"/>
          </module>
          <module name="ParameterNumber">
               <property name="max" value="10"/>
          </module>
          <module name="EmptyForIteratorPad"/>
          <module name="NoWhitespaceAfter"/>
          <module name="NoWhitespaceBefore"/>
          <module name="TypecastParenPad"/>
          <module name="RedundantModifier"/>
          <module name="AvoidNestedBlocks"/>
          <module name="EmptyBlock">
               <property name="option" value="text"/>
          </module>
          <module name="AvoidInlineConditionals"/>
          <module name="EmptyStatement"/>
          <module name="EqualsHashCode"/>
          <module name="IllegalInstantiation"/>
          <module name="InnerAssignment"/>
          <!-- <module name="MagicNumber"/> -->
          <module name="SimplifyBooleanExpression"/>
          <module name="SimplifyBooleanReturn"/>
          <module name="FinalClass"/>
          <module name="HideUtilityClassConstructor"/>
          <module name="InterfaceIsType">
               <property name="severity" value="ignore"/>
          </module>
          <module name="VisibilityModifier"/>
          <module name="FinalParameters">
               <property name="severity" value="ignore"/>
          </module>
          <module name="AbstractClassName">
               <property name="ignoreModifier" value="true"/>
          </module>
          <module name="CovariantEquals"/>
          <module name="DefaultComesLast"/>
          <module name="ModifiedControlVariable"/>
          <module name="MultipleStringLiterals">
               <property name="allowedDuplicates" value="5"/>
               <property name="ignoreStringsRegexp" value="^(&quot;&quot;|&quot;unchecked&quot;)$"/>
          </module>
          <module name="NestedIfDepth">
               <property name="max" value="4"/>
          </module>
          <module name="NestedTryDepth">
               <property name="max" value="4"/>
          </module>
          <module name="PackageDeclaration"/>
          <module name="ParameterAssignment"/>
          <module name="StringLiteralEquality"/>
          <module name="SuperFinalize"/>
        <module name="DeclarationOrder"/>
          <!-- toolarium-jwebserver add on -->
     </module>

     <module name="Translation"/>
     <module name="FileLength">
          <property name="max" value="3000"/>
     </module>
     <module name="RegexpHeader">
          <property name="headerFile" value="${samedir}/checkstyle-file-header.txt"/>
     </module>
</module>
